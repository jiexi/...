#!/usr/bin/env bash

set -e

function cleanup {
  swapoff -a
  umount /mnt/boot
  umount /mnt
  cryptsetup close root
}
trap cleanup EXIT

function section {
  echo
  echo
  echo
  echo "########################################"
  echo "$1"
  echo "########################################"
  echo
}

function ask {
  printf "%s: " "$2"
  read $1
}

function askyesno {
  AFFIRMATIVE=${3:-yes}
  NEGATIVE=${4:-no}
  while [ "${!1}" != "$AFFIRMATIVE" ] && [ "${!1}" != "$NEGATIVE" ]; do
    ask $1 "$2 ($AFFIRMATIVE/$NEGATIVE)"
  done
}

function confirm {
  CONTINUE="nil"
  askyesno CONTINUE "$1"
  if [ "$CONTINUE" == "no" ]; then
    exit 1
  fi
}

# https://wiki.archlinux.org/index.php/Installation_guide#Update_the_system_clock
# section "UPDATING SYSTEM CLOCK"
# timedatectl set-ntp true

section "GENERATING AND UPDATING MIRROR LIST"
curl "https://www.archlinux.org/mirrorlist/?country=US&protocol=https&ip_version=4" | sed -E 's/^#//' > /etc/pacman.d/mirrorlist
cat /etc/pacman.d/mirrorlist
confirm "Continue with this mirror list?"


section "PARTITIONING DRIVE"
fdisk -l
ask DRIVE "Select a drive"
CREATE_GPT="no"
CREATE_EFI="no"
CREATE_SYSTEM="no"
PARTITION_COUNT=$(lsblk -pln -io name "$DRIVE" | wc -l)
if [ $PARTITION_COUNT -gt 1 ]; then
  confirm "Drive is already partitioned. Is this correct?"
  # TODO(JL): Actually verify that GPT Partition Table exists... lol
  CREATE_GPT="no"
  CREATE_EFI="no"
  EXISTS_SYSTEM_PARTITION="nil"
  askyesno EXISTS_SYSTEM_PARTITION "Does a partition for Arch already exist?"
  if [ "$EXISTS_SYSTEM_PARTITION" == "no" ]; then
    CREATE_SYSTEM="yes"
  else
    CREATE_SYSTEM="no"
  fi
else
  confirm "Drive is not partitioned. Is this correct?"
  CREATE_GPT="yes"
  CREATE_EFI="yes"
  CREATE_SYSTEM="yes"
fi

if [ "$CREATE_GPT" == "yes" ]; then
  echo "New GPT Partition Table will be created"
else
  echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
  echo "Existing Partition Table will be used"
  echo "This must be GPT! (We did not check for you)"
  echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
fi

if [ "$CREATE_EFI" == "yes" ]; then
  echo "New EFI Partition will be created"
else
  echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
  echo "Existing EFI Partition will be used"
  echo "This may leave your machine in a broken state!"
  echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
fi

if [ "$CREATE_SYSTEM" == "yes" ]; then
  echo "New System Partition will be created"
  ask SYSTEM_SIZE "System Partition size in MB (leave empty for max)"
  if [[ $(echo "$SYSTEM_SIZE") ]]; then
    SYSTEM_SIZE="+$(echo "$SYSTEM_SIZE")M"
  fi
else
  echo "Existing System Partition will be used"
fi

# https://wiki.archlinux.org/index.php/Installation_guide#Partition_the_disks
# https://wiki.archlinux.org/index.php/Dual_boot_with_Windows
function fdisk_partition_drives {
  if [ "$CREATE_GPT" == "yes" ]; then
    echo g     # make gpt partition table
  fi
  if [ "$CREATE_EFI" == "yes" ]; then
    echo n     # Add new partition (/boot)
    echo       # (default 1)
    echo       # (default 2048)
    echo "+512M"
    echo t     # Change partition type
    echo 1     # Partition number 1 (/boot)
    echo 1     # EFI System
  fi
  if [ "$CREATE_SYSTEM" == "yes" ]; then
    echo n     # Add new partition (linux)
    echo       # (default 2)
    echo       # (default)
    echo "$SYSTEM_SIZE"
  fi

  if [ "$CREATE_GPT" == "yes" ] || \
     [ "$CREATE_EFI" == "yes" ] || \
     [ "$CREATE_SYSTEM" == "yes" ]; then
    echo w     # write
  fi
}

if [[ $(fdisk_partition_drives) ]]; then
  echo "fdisk will be run with commands:"
  fdisk_partition_drives
  echo "Drive will be modified"
  confirm "Continue with partitioning?"
  fdisk_partition_drives | fdisk "$DRIVE"
  echo "Partitioning complete"
else
  echo "Drive will not be modified"
  echo "Partitioning skipped"
fi


section "FORMATTING & MOUNTING DRIVE"
PARTITIONS=($(lsblk -pln -o name "$DRIVE"))
EFI_PARTITION=${PARTITIONS[1]}
SYSTEM_PARTITION=${PARTITIONS[-1]}

function print_partition_selection {
  echo "EFI Partition $EFI_PARTITION"
  echo "System Partition $SYSTEM_PARTITION"
}

function input_partition_selection {
  ask EFI_PARTITION "EFI Partition"
  ask SYSTEM_PARTITION "System Partition"
}

while :; do
  fdisk -l "$DRIVE"
  print_partition_selection
  USE_PARTITION_SELECTION="nil"
  askyesno USE_PARTITION_SELECTION "Are these correct?"
  if [ "$USE_PARTITION_SELECTION" == "no" ]; then
    input_partition_selection
  else
    break
  fi
done
confirm "Continue with formatting?"


# https://wiki.archlinux.org/index.php/Installation_guide#Format_the_partitions
# https://wiki.archlinux.org/index.php/Dm-crypt/Encrypting_an_entire_system#LUKS_on_a_partition
cryptsetup luksFormat --type luks "$SYSTEM_PARTITION"
cryptsetup luksOpen "$SYSTEM_PARTITION" root
if [ "$CREATE_EFI" == "yes" ]; then
  mkfs.vfat -F32 "$EFI_PARTITION"
fi
mkfs.ext4 -F /dev/mapper/root
mount /dev/mapper/root /mnt
mkdir /mnt/boot
mount "$EFI_PARTITION" /mnt/boot

# https://wiki.archlinux.org/index.php/swap#Manually
ask SWAPSIZE "Swapfile size in MB"
mkdir /mnt/var
dd if=/dev/zero of=/mnt/var/swap count="$SWAPSIZE" bs=1MiB
chmod 600 /mnt/var/swap
mkswap /mnt/var/swap
swapon /mnt/var/swap


section "INSTALLING BASE"
# https://wiki.archlinux.org/index.php/Installation_guide#Installation
pacstrap /mnt \
  base \
  base-devel \
  linux \
  linux-firmware \
  refind-efi \
  os-prober \
  ;

askyesno IS_INTEL "Is this an Intel based machine?"
if [ "$IS_INTEL" == "yes" ]; then
  rm /mnt/boot/intel-ucode.img # Need to do this or pacstrap will fail
  pacstrap /mnt intel-ucode
  INTEL_FLAG="initrd=intel-ucode.img"
fi

# https://wiki.archlinux.org/index.php/Installation_guide#Configure_the_system
genfstab -U /mnt >> /mnt/etc/fstab
# https://wiki.archlinux.org/index.php/swap#Manually
echo "/var/swap none swap defaults 0 0" >> /mnt/etc/fstab


section "RUNNING CHROOT SCRIPT"
cp chroot /mnt/chroot
arch-chroot /mnt bash /chroot
rm /mnt/chroot


section "SETTING UP BOOTLOADER"
echo "Is $DRIVE an SSD that fully supports TRIM commands?"
echo "If you are aware of the security implications,"
echo "you can enable TRIM for performance benefits."
ENABLE_TRIM="nil"
# https://wiki.archlinux.org/index.php/Dm-crypt/Specialties#Discard/TRIM_support_for_solid_state_drives_(SSD)
askyesno ENABLE_TRIM "Enable TRIM on $DRIVE?"
if [ "$ENABLE_TRIM" == "yes" ]; then
  echo "Drive will have TRIM enabled"
  TRIM_FLAG=":allow-discards"
else
  echo "Drive will have TRIM disabled"
fi

PARTUUID=$(lsblk -dno PARTUUID $SYSTEM_PARTITION)
RESUME_OFFSET=$(filefrag -v /mnt/var/swap | awk '{ if($1=="0:"){print $4} }' | sed -e 's/\.//g')

echo "Using PARTUUID ${PARTUUID}"
echo "Using resume_offset ${RESUME_OFFSET}"

arch-chroot /mnt refind-install
cat > /mnt/boot/refind_linux.conf <<EOL
"Boot using default options" "cryptdevice=PARTUUID=${PARTUUID}:root${TRIM_FLAG} root=/dev/mapper/root resume=/dev/mapper/root resume_offset=${RESUME_OFFSET} rw add_efi_memmap ${INTEL_FLAG} initrd=initramfs-linux.img"
EOL


section "CLEANING UP"
cleanup
echo "Done"
echo "Optional: Manually cleanup and reorder boot entries with 'efibootmgr'"
REBOOT_MACHINE="nil"
askyesno REBOOT_MACHINE "Reboot?"
if [ "$REBOOT_MACHINE" == "yes" ]; then
  reboot
fi
