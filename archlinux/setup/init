#!/usr/bin/env bash

set -e

function section {
  echo
  echo
  echo
  echo "########################################"
  echo "$1"
  echo "########################################"
  echo
}

function ask {
  printf "%s: " "$2"
  read $1
}

function askyesno {
  AFFIRMATIVE=${3:-yes}
  NEGATIVE=${4:-no}
  while [ "${!1}" != "$AFFIRMATIVE" ] && [ "${!1}" != "$NEGATIVE" ]; do
    ask $1 "$2 ($AFFIRMATIVE/$NEGATIVE)"
  done
}

function confirm {
  CONTINUE="nil"
  askyesno CONTINUE "$1"
  if [ "$CONTINUE" == "no" ]; then
    exit 1
  fi
}


section "GENERATING AND UPDATING MIRROR LIST"
curl "https://www.archlinux.org/mirrorlist/?country=US&protocol=https&ip_version=4" | sed -E 's/^#//' > /etc/pacman.d/mirrorlist
cat /etc/pacman.d/mirrorlist
confirm "Continue with this mirror list?"


section "PARTITIONING DRIVE"
fdisk -l
ask DRIVE "Select a drive"
CREATE_GPT="no"
CREATE_EFI="no"
CREATE_SYSTEM="no"
CREATE_RECOVERY="nil"
PARTITION_COUNT=$(lsblk -pln -io name "$DRIVE" | wc -l)
if [ $PARTITION_COUNT -gt 1 ]; then
  confirm "Drive is already partitioned. Is this correct?"
  CREATE_GPT="no"
  CREATE_EFI="no"
  EXISTS_SYSTEM_PARTITION="nil"
  askyesno EXISTS_SYSTEM_PARTITION "Does a partition for Arch already exist?"
  if [ "$EXISTS_SYSTEM_PARTITION" == "no" ]; then
    CREATE_SYSTEM="yes"
  else
    CREATE_SYSTEM="no"
  fi
else
  confirm "Drive is not partitioned. Is this correct?"
  CREATE_GPT="yes"
  CREATE_EFI="yes"
  CREATE_SYSTEM="yes"
fi

echo
echo

if [ "$CREATE_GPT" == "yes" ]; then
  echo "New GPT Partition table will be created"
else
  echo "Existing Partition table will be used"
fi

if [ "$CREATE_EFI" == "yes" ]; then
  echo "New EFI Partition will be created"
else
  echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
  echo "Existing EFI Partition will be used"
  echo "This may leave your machine in a broken state!"
  echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
fi

if [ "$CREATE_SYSTEM" == "yes" ]; then
  echo "New System Partition will be created"
  ask SYSTEM_SIZE "System Partition size in MB (leave empty for max)"
  echo "Arch doesn't have a recovery environment like Windows does"
  echo "We can write this Arch boostrap environment to your drive"
  echo "NOTE: This will shrink the system partition by 1000MB"
  askyesno CREATE_RECOVERY "Create Recovery Environment?"
  if [[ $(echo "$SYSTEM_SIZE") ]]; then
    SYSTEM_SIZE=$(expr $SYSTEM_SIZE - 1000)
    SYSTEM_SIZE="+$(echo "$SYSTEM_SIZE")M"
  else
    if [ "$CREATE_RECOVERY" == "yes" ]; then
      SYSTEM_SIZE="-1000M"
    fi
  fi
else
  echo "Existing System Partition will be used"
fi

if [ "$CREATE_RECOVERY" == "yes" ]; then
  echo "Recovery Environment will be created"
else
  echo "Skipping Recovery Environment"
fi

function fdisk_partition_drives {
  if [ "$CREATE_GPT" == "yes" ]; then
    echo g     # make gpt partition table
  fi
  if [ "$CREATE_EFI" == "yes" ]; then
    echo n     # Add new partition (/boot)
    echo       # (default 1)
    echo       # (default 2048)
    echo "+512M"
    echo t     # Change partition type
    echo 1     # Partition number 1 (/boot)
    echo 1     # EFI System
  fi
  if [ "$CREATE_SYSTEM" == "yes" ]; then
    echo n     # Add new partition (linux)
    echo       # (default 2)
    echo       # (default)
    echo "$SYSTEM_SIZE"
  fi
  if [ "$CREATE_RECOVERY" == "yes" ]; then
    echo n     # Add new partition (recovery)
    echo       # (default 3)
    echo       # (default)
    echo "+1000M"
  fi

  if [ "$CREATE_GPT" == "yes" ] || \
     [ "$CREATE_EFI" == "yes" ] || \
     [ "$CREATE_SYSTEM" == "yes" ] || \
     [ "$CREATE_RECOVERY" == "yes" ]; then
    echo w     # write
  fi
}

if [[ $(fdisk_partition_drives) ]]; then
  echo "fdisk will be run with commands:"
  fdisk_partition_drives
  echo "Drive will be modified"
  confirm "Continue with partitioning?"
  fdisk_partition_drives | fdisk "$DRIVE"
  echo "Partitioning complete"
else
  echo "Drive will not be modified"
  echo "Partitioning skipped"
fi


section "FORMATTING & MOUNTING DRIVE"
PARTITIONS=($(lsblk -pln -o name "$DRIVE"))
EFI_PARTITION=${PARTITIONS[1]}
if [ "$CREATE_RECOVERY" == "yes" ]; then
  RECOVERY_PARTITION=${PARTITIONS[-1]}
  SYSTEM_PARTITION=${PARTITIONS[-2]}
else
  SYSTEM_PARTITION=${PARTITIONS[-1]}
fi

function print_partition_selection {
  echo "Using Partitions"
  echo "EFI Partition $EFI_PARTITION"
  echo "System Partition $SYSTEM_PARTITION"
  echo "Recovery Partition $RECOVERY_PARTITION"
}

function input_partition_selection {
  ask EFI_PARTITION "EFI Partition"
  ask SYSTEM_PARTITION "System Partition"
  ask RECOVERY_PARTITION "Recovery Partition"
}

while :; do
  fdisk -l "$DRIVE"
  print_partition_selection
  MODIFY_PARTITION_SELECTION="nil"
  askyesno MODIFY_PARTITION_SELECTION "Modify these selections?"
  if [ "$MODIFY_PARTITION_SELECTION" == "yes" ]; then
    input_partition_selection
  else
    break
  fi
done
confirm "Continue with formatting?"

cryptsetup luksFormat --type luks "$SYSTEM_PARTITION"
cryptsetup luksOpen "$SYSTEM_PARTITION" main
mkfs.vfat -F32 "$EFI_PARTITION"
mkfs.ext4 -F /dev/mapper/main
mount /dev/mapper/main /mnt
mkdir /mnt/boot
mount "$EFI_PARTITION" /mnt/boot

ask SWAPSIZE "Swapfile size in MB"
mkdir /mnt/var
dd if=/dev/zero of=/mnt/var/swap count="$SWAPSIZE" bs=1MiB
chmod 600 /mnt/var/swap
mkswap /mnt/var/swap


section "INSTALLING BASE"
pacstrap /mnt base linux linux-firmware
genfstab -U /mnt >> /mnt/etc/fstab
echo "/var/swap none swap defaults 0 0" >> /mnt/etc/fstab


section "STARTING CHROOT SCRIPT"
mv chroot /mnt/chroot
arch-chroot /mnt bash /chroot
rm /mnt/chroot


section "CREATING BOOT ENTRY"
echo "Is $DRIVE an SSD that fully supports TRIM commands?"
echo "If you are aware of the security implications,"
echo "you can enable TRIM for performance benefits."
ENABLE_TRIM="nil"
askyesno ENABLE_TRIM "Enable TRIM on $DRIVE?"
if [ "$ENABLE_TRIM" == "yes" ]; then
  echo "Drive will have TRIM enabled"
  TRIM_FLAG=":allow-discards"
else
  echo "Drive will have TRIM disabled"
fi

PARTUUID=$(lsblk -dno PARTUUID $SYSTEM_PARTITION)
efibootmgr \
  --disk "$DRIVE" \
  --create \
  --label EFI \
  --loader /vmlinuz-linux \
  --unicode "cryptdevice=PARTUUID=$PARTUUID:root$TRIM_FLAG root=/dev/mapper/root rw initrd=\\initramfs-linux.img" \
  --verbose \
  ;

section "CLEANING UP"
umount /mnt/boot
umount /mnt
cryptsetup close main

# TODO(JL): Swapfile for hibernation. Actually create recovery environment
